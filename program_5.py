# -*- coding: utf-8 -*-
"""Program 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16eKYjx7bO1LgqM9QO1rbHNwSy2WfM_Hd
"""

!pip install sentence-transformers

from sentence_transformers import SentenceTransformer, util
import torch
import random

# Load pre-trained SBERT model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Function to get similar words based on cosine similarity
def get_similar_words(word, word_list, top_n=5):
    # Encode all words into embeddings
    word_embeddings = model.encode([word] + word_list, convert_to_tensor=True)

    # Compute cosine similarity
    similarities = util.pytorch_cos_sim(word_embeddings[0], word_embeddings[1:]).squeeze(0)

    # Get top N most similar words
    top_indices = torch.topk(similarities, top_n).indices.tolist()

    return [word_list[i] for i in top_indices]

# Function to generate a meaningful paragraph using similar words
def generate_story(seed_word):
    # Sample word list (can be replaced with a larger corpus)
    word_list = ["adventure", "journey", "quest", "mystery", "discovery", "expedition", "exploration", "voyage"]

    similar_words = get_similar_words(seed_word, word_list, top_n=5)
    random.shuffle(similar_words)

    story_template = (
        f"One day, a {seed_word} set out on a {similar_words[0]}. "
        f"Along the way, it stumbled upon a {similar_words[1]} that led to an unexpected {similar_words[2]}. "
        f"Guided by an old {similar_words[3]}, the {seed_word} finally reached the ultimate {similar_words[4]}."
    )

    return story_template

# Example usage
seed_word = "explorer"
story = generate_story(seed_word)

print("\n✨ Generated Story:\n", story)





from sentence_transformers import SentenceTransformer, util
import torch
import random

# Load pre-trained SBERT model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Function to get similar words based on cosine similarity
def get_similar_words(word, word_list, top_n=5):
    # Encode all words into embeddings
    word_embeddings = model.encode([word] + word_list, convert_to_tensor=True)

    # Compute cosine similarity
    similarities = util.pytorch_cos_sim(word_embeddings[0], word_embeddings[1:]).squeeze(0)

    # Get top N most similar words
    top_indices = torch.topk(similarities, top_n).indices.tolist()

    return [word_list[i] for i in top_indices]

# Function to generate a meaningful paragraph using similar words
def generate_story(seed_word):
    # Sample word list (can be replaced with a larger corpus)
    word_list = ["adventure", "journey", "quest", "mystery", "discovery", "expedition", "exploration", "voyage"]

    similar_words = get_similar_words(seed_word, word_list, top_n=5)
    random.shuffle(similar_words)

    story_template = (
        f"One day, a {seed_word} set out on a {similar_words[0]}. "
        f"Along the way, it stumbled upon a {similar_words[1]} that led to an unexpected {similar_words[2]}. "
        f"Guided by an old {similar_words[3]}, the {seed_word} finally reached the ultimate {similar_words[4]}."
    )

    return story_template

# Example usage
seed_word = "victory"
story = generate_story(seed_word)

print("\n✨ Generated Story:\n", story)





import spacy
import random

# Load spaCy's GloVe-based word embeddings model (pre-installed)
nlp = spacy.load("en_core_web_md")

# Function to get similar words
def get_similar_words(word, top_n=3):
    token = nlp(word)
    similar_words = sorted(nlp.vocab, key=lambda w: token.similarity(w) if w.has_vector else -1, reverse=True)
    return [w.text for w in similar_words[:top_n] if w.has_vector]

# Function to generate a short story using similar words
def generate_story(seed_word):
    similar_words = get_similar_words(seed_word, top_n=5)
    random.shuffle(similar_words)

    story_template = (
        f"One day, a {seed_word} was wandering through a {similar_words[0]}. "
        f"It discovered a hidden {similar_words[1]} filled with secrets. "
        f"As it explored, it met a wise {similar_words[2]} who shared an ancient {similar_words[3]}. "
        f"This knowledge changed the {seed_word}'s destiny forever."
    )

    return story_template

# Example usage
seed_word = "explorer"
story = generate_story(seed_word)

print("\n✨ Generated Story:\n", story)