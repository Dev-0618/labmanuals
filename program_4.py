# -*- coding: utf-8 -*-
"""Program 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jGkj5eI7Vr98pb6Zwpz0PViOz3Ex2jue
"""

import nltk
from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag
import random

nltk.download('all')

def enhance_prompt(original_prompt):
    words = word_tokenize(original_prompt)  # Tokenize sentence
    tagged_words = pos_tag(words)  # POS tagging

    enriched_words = []
    for word, tag in tagged_words:
        if tag in ["NN", "NNS", "JJ", "RB"]:  # Replace nouns, adjectives, adverbs
            similar = get_similar_words(word, top_n=1)
            enriched_words.append(similar[0] if similar else word)
        else:
            enriched_words.append(word)

    return " ".join(enriched_words)

# âœ… Test again
original_prompt = "Describe the impact of artificial intelligence on healthcare."
enriched_prompt = enhance_prompt(original_prompt)

print("ðŸ”¹ Original Prompt:", original_prompt)
print("ðŸ”¹ Enriched Prompt:", enriched_prompt)

import cohere
import nltk
from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np


# Initialize Cohere API
COHERE_API_KEY = "QKTw2AukXCot66ZrwhesRxfB5uHISZj5qTgtRgFE"
co = cohere.Client(COHERE_API_KEY)

# Function to get similar words dynamically
def get_similar_word(word, word_list, word_embeddings):
    try:
        word_idx = word_list.index(word)
        word_embedding = word_embeddings[word_idx].reshape(1, -1)

        # Compute similarity with all words
        similarities = cosine_similarity(word_embedding, word_embeddings)
        similar_idx = np.argsort(similarities[0])[-2]  # Avoid self-match

        return word_list[similar_idx]
    except ValueError:
        return word  # If word is not found, return as is

# Enhance prompt with similar words dynamically
def enhance_prompt(original_prompt):
    words = word_tokenize(original_prompt)
    tagged_words = pos_tag(words)

    # Extract only relevant words (nouns, adjectives, adverbs) dynamically
    filtered_words = [word for word, tag in tagged_words if tag in ["NN", "NNS", "JJ", "RB"]]

    # Get embeddings for these words
    response = co.embed(texts=filtered_words, model="embed-english-v3.0", input_type="search_document")

    embeddings = np.array(response.embeddings)

    enriched_words = []
    for word in words:
        if word in filtered_words:
            enriched_words.append(get_similar_word(word, filtered_words, embeddings))
        else:
            enriched_words.append(word)

    return " ".join(enriched_words)

# Example prompt
original_prompt = "Describe the impact of artificial intelligence on healthcare."
enriched_prompt = enhance_prompt(original_prompt)

print("ðŸ”¹ Original Prompt:", original_prompt)
print("ðŸ”¹ Enriched Prompt:", enriched_prompt)

import cohere
import nltk
from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np


# Initialize Cohere API
co = cohere.Client(COHERE_API_KEY)

# Function to get similar words
def get_similar_word(word, word_list, word_embeddings):
    try:
        if word not in word_list:
            return word  # Return original if no embedding found

        word_idx = word_list.index(word)
        word_embedding = word_embeddings[word_idx].reshape(1, -1)

        similarities = cosine_similarity(word_embedding, word_embeddings)
        similar_idx = np.argsort(similarities[0])[-2]  # Second closest word

        return word_list[similar_idx]
    except Exception:
        return word  # In case of errors, return original word

# Enhance the prompt dynamically
def enhance_prompt(original_prompt):
    words = word_tokenize(original_prompt)
    tagged_words = pos_tag(words)

    # Extract key nouns & adjectives
    filtered_words = [word for word, tag in tagged_words if tag in ["NN", "NNS", "JJ"]]

    if not filtered_words:
        return original_prompt  # No words to replace

    # âœ… FIX: Specify input_type explicitly
    response = co.embed(texts=filtered_words, model="embed-english-v3.0", input_type="search_document")
    embeddings = np.array(response.embeddings)

    enriched_words = []
    for word in words:
        if word in filtered_words:
            enriched_words.append(get_similar_word(word, filtered_words, embeddings))
        else:
            enriched_words.append(word)

    return " ".join(enriched_words)

# Example prompt
original_prompt = "Describe the impact of artificial intelligence on healthcare."
enriched_prompt = enhance_prompt(original_prompt)

print("ðŸ”¹ Original Prompt:", original_prompt)
print("ðŸ”¹ Enriched Prompt:", enriched_prompt)



